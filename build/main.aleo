import zk_deck_shuffle.aleo;
import zk_sra_encryption.aleo;
import credits.aleo;
program war_000000000000000000000000000.aleo;

record Keys:
    owner as address.private;
    e as u128.private;
    d as u128.private;
    n as u128.private;

struct Game:
    player1 as address;
    player2 as address;
    cards_p1 as [u128; 26u32];
    cards_p2 as [u128; 26u32];
    chips_p1 as i8;
    chips_p2 as i8;
    turn as u8;
    war as u8;
    remaining_cards_p1 as u8;
    remaining_cards_p2 as u8;
    first_move_done as boolean;
    p1_must_reveal_p1 as boolean;
    p1_must_reveal_p2 as boolean;
    p2_must_reveal_p2 as boolean;
    p2_must_reveal_p1 as boolean;
    must_compare as boolean;
    winner as u8;

mapping games:
    key as u32.public;
    value as Game.public;

function create_game:
    input r0 as u32.private;
    input r1 as i8.private;
    input r2 as i8.private;
    input r3 as i8.private;
    input r4 as u128.private;
    input r5 as u128.private;
    input r6 as u128.private;
    cast 1u128 2u128 3u128 4u128 5u128 6u128 7u128 8u128 9u128 10u128 11u128 12u128 13u128 14u128 15u128 16u128 17u128 18u128 19u128 20u128 21u128 22u128 23u128 24u128 25u128 26u128 into r7 as [u128; 26u32];
    cast 27u128 28u128 29u128 30u128 31u128 32u128 33u128 34u128 35u128 36u128 37u128 38u128 39u128 40u128 41u128 42u128 43u128 44u128 45u128 46u128 47u128 48u128 49u128 50u128 51u128 52u128 into r8 as [u128; 26u32];
    cast r7 r8 into r9 as [[u128; 26u32]; 2u32];
    call zk_sra_encryption.aleo/encrypt_deck r4 r6 r9 into r10;
    call zk_deck_shuffle.aleo/full_shuffle r1 r2 r3 r10 into r11;
    cast self.caller r4 r5 r6 into r12 as Keys.record;
    call credits.aleo/transfer_public_as_signer self.signer 10000000u64 into r13;
    async create_game r0 r11 self.caller r13 into r14;
    output r12 as Keys.record;
    output r14 as war_000000000000000000000000000.aleo/create_game.future;

finalize create_game:
    input r0 as u32.public;
    input r1 as [[u128; 26u32]; 2u32].public;
    input r2 as address.public;
    input r3 as credits.aleo/transfer_public_as_signer.future;
    await r3;
    cast r2 aleo1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3ljyzc r1[0u32] r1[1u32] 32i8 32i8 0u8 1u8 26u8 26u8 false false false false false false 0u8 into r4 as Game;
    set r4 into games[r0];

function join_game:
    input r0 as u32.private;
    input r1 as [[u128; 26u32]; 2u32].private;
    input r2 as i8.private;
    input r3 as i8.private;
    input r4 as i8.private;
    input r5 as u128.private;
    input r6 as u128.private;
    input r7 as u128.private;
    call zk_sra_encryption.aleo/encrypt_deck r5 r7 r1 into r8;
    call zk_deck_shuffle.aleo/full_shuffle r2 r3 r4 r8 into r9;
    cast self.caller r5 r6 r7 into r10 as Keys.record;
    call credits.aleo/transfer_public_as_signer self.signer 10000000u64 into r11;
    async join_game r0 r1 r9 self.caller r11 into r12;
    output r10 as Keys.record;
    output r12 as war_000000000000000000000000000.aleo/join_game.future;

finalize join_game:
    input r0 as u32.public;
    input r1 as [[u128; 26u32]; 2u32].public;
    input r2 as [[u128; 26u32]; 2u32].public;
    input r3 as address.public;
    input r4 as credits.aleo/transfer_public_as_signer.future;
    await r4;
    get games[r0] into r5;
    is.eq r5.cards_p1 r1[0u32] into r6;
    assert.eq r6 true;
    is.eq r5.cards_p2 r1[1u32] into r7;
    assert.eq r7 true;
    cast r5.player1 r3 r2[0u32] r2[1u32] r5.chips_p1 r5.chips_p2 1u8 1u8 r5.remaining_cards_p1 r5.remaining_cards_p2 false false true false true false 0u8 into r8 as Game;
    set r8 into games[r0];

function bet:
    input r0 as u32.private;
    async bet r0 self.caller into r1;
    output r1 as war_000000000000000000000000000.aleo/bet.future;

finalize bet:
    input r0 as u32.public;
    input r1 as address.public;
    get games[r0] into r2;
    mod r2.turn 2u8 into r3;
    is.eq r3 1u8 into r4;
    is.eq r1 r2.player1 into r5;
    and r4 r5 into r6;
    or r2.first_move_done r6 into r7;
    assert.eq r7 true;
    not r4 into r8;
    is.eq r1 r2.player2 into r9;
    and r8 r9 into r10;
    or r2.first_move_done r10 into r11;
    assert.eq r11 true;
    not r2.must_compare into r12;
    assert.eq r12 true;
    ternary r2.first_move_done true false into r13;
    ternary r2.first_move_done true false into r14;
    ternary r2.first_move_done true false into r15;
    cast r2.player1 r2.player2 r2.cards_p1 r2.cards_p2 r2.chips_p1 r2.chips_p2 r2.turn r2.war r2.remaining_cards_p1 r2.remaining_cards_p2 false r13 false r14 false r15 0u8 into r16 as Game;
    set r16 into games[r0];

function fold:
    input r0 as u32.private;
    async fold r0 self.caller into r1;
    output r1 as war_000000000000000000000000000.aleo/fold.future;

finalize fold:
    input r0 as u32.public;
    input r1 as address.public;
    get games[r0] into r2;
    mod r2.turn 2u8 into r3;
    is.eq r3 1u8 into r4;
    is.eq r1 r2.player1 into r5;
    is.eq r1 r2.player2 into r6;
    or r5 r6 into r7;
    assert.eq r7 true;
    is.eq r1 r2.player1 into r8;
    and r4 r8 into r9;
    or r2.first_move_done r9 into r10;
    assert.eq r10 true;
    not r4 into r11;
    is.eq r1 r2.player2 into r12;
    and r11 r12 into r13;
    or r2.first_move_done r13 into r14;
    assert.eq r14 true;
    not r2.must_compare into r15;
    assert.eq r15 true;
    is.eq r1 r2.player1 into r16;
    cast r2.war into r17 as i8;
    sub r17 1i8 into r18;
    mul r18 2i8 into r19;
    add r19 1i8 into r20;
    sub r2.chips_p1 r20 into r21;
    cast r2.war into r22 as i8;
    sub r22 1i8 into r23;
    mul r23 2i8 into r24;
    add r2.chips_p1 r24 into r25;
    add r25 1i8 into r26;
    ternary r16 r21 r26 into r27;
    is.eq r1 r2.player2 into r28;
    cast r2.war into r29 as i8;
    sub r29 1i8 into r30;
    mul r30 2i8 into r31;
    add r31 1i8 into r32;
    sub r2.chips_p2 r32 into r33;
    cast r2.war into r34 as i8;
    sub r34 1i8 into r35;
    mul r35 2i8 into r36;
    add r2.chips_p2 r36 into r37;
    add r37 1i8 into r38;
    ternary r28 r33 r38 into r39;
    add r2.turn 1u8 into r40;
    is.eq r1 r2.player2 into r41;
    and r4 r41 into r42;
    sub r2.remaining_cards_p1 1u8 into r43;
    ternary r42 r43 r2.remaining_cards_p1 into r44;
    not r4 into r45;
    is.eq r1 r2.player1 into r46;
    and r45 r46 into r47;
    sub r2.remaining_cards_p2 1u8 into r48;
    ternary r47 r48 r2.remaining_cards_p2 into r49;
    not r4 into r50;
    is.eq r1 r2.player1 into r51;
    and r50 r51 into r52;
    ternary r52 true false into r53;
    is.eq r1 r2.player2 into r54;
    and r4 r54 into r55;
    ternary r55 true false into r56;
    cast r2.player1 r2.player2 r2.cards_p1 r2.cards_p2 r27 r39 r40 1u8 r44 r49 false false r53 false r56 false 0u8 into r57 as Game;
    set r57 into games[r0];

function p1_reveal_p2:
    input r0 as u32.private;
    input r1 as u128.private;
    input r2 as Keys.record;
    call zk_sra_encryption.aleo/decrypt_card r2.d r2.n r1 into r3;
    async p1_reveal_p2 r0 self.caller r1 r3 into r4;
    cast r2.owner r2.e r2.d r2.n into r5 as Keys.record;
    output r5 as Keys.record;
    output r4 as war_000000000000000000000000000.aleo/p1_reveal_p2.future;

finalize p1_reveal_p2:
    input r0 as u32.public;
    input r1 as address.public;
    input r2 as u128.public;
    input r3 as u128.public;
    get games[r0] into r4;
    is.eq r4.remaining_cards_p1 26u8 into r5;
    is.eq r4.remaining_cards_p1 25u8 into r6;
    is.eq r4.remaining_cards_p1 24u8 into r7;
    is.eq r4.remaining_cards_p1 23u8 into r8;
    is.eq r4.remaining_cards_p1 22u8 into r9;
    is.eq r4.remaining_cards_p1 21u8 into r10;
    is.eq r4.remaining_cards_p1 20u8 into r11;
    is.eq r4.remaining_cards_p1 19u8 into r12;
    is.eq r4.remaining_cards_p1 18u8 into r13;
    is.eq r4.remaining_cards_p1 17u8 into r14;
    is.eq r4.remaining_cards_p1 16u8 into r15;
    is.eq r4.remaining_cards_p1 15u8 into r16;
    is.eq r4.remaining_cards_p1 14u8 into r17;
    is.eq r4.remaining_cards_p1 13u8 into r18;
    is.eq r4.remaining_cards_p1 12u8 into r19;
    is.eq r4.remaining_cards_p1 11u8 into r20;
    is.eq r4.remaining_cards_p1 10u8 into r21;
    is.eq r4.remaining_cards_p1 9u8 into r22;
    is.eq r4.remaining_cards_p1 8u8 into r23;
    is.eq r4.remaining_cards_p1 7u8 into r24;
    is.eq r4.remaining_cards_p1 6u8 into r25;
    is.eq r4.remaining_cards_p1 5u8 into r26;
    is.eq r4.remaining_cards_p1 4u8 into r27;
    is.eq r4.remaining_cards_p1 3u8 into r28;
    is.eq r4.remaining_cards_p1 2u8 into r29;
    ternary r29 r4.cards_p1[1u32] r4.cards_p1[0u32] into r30;
    ternary r28 r4.cards_p1[2u32] r30 into r31;
    ternary r27 r4.cards_p1[3u32] r31 into r32;
    ternary r26 r4.cards_p1[4u32] r32 into r33;
    ternary r25 r4.cards_p1[5u32] r33 into r34;
    ternary r24 r4.cards_p1[6u32] r34 into r35;
    ternary r23 r4.cards_p1[7u32] r35 into r36;
    ternary r22 r4.cards_p1[8u32] r36 into r37;
    ternary r21 r4.cards_p1[9u32] r37 into r38;
    ternary r20 r4.cards_p1[10u32] r38 into r39;
    ternary r19 r4.cards_p1[11u32] r39 into r40;
    ternary r18 r4.cards_p1[12u32] r40 into r41;
    ternary r17 r4.cards_p1[13u32] r41 into r42;
    ternary r16 r4.cards_p1[14u32] r42 into r43;
    ternary r15 r4.cards_p1[15u32] r43 into r44;
    ternary r14 r4.cards_p1[16u32] r44 into r45;
    ternary r13 r4.cards_p1[17u32] r45 into r46;
    ternary r12 r4.cards_p1[18u32] r46 into r47;
    ternary r11 r4.cards_p1[19u32] r47 into r48;
    ternary r10 r4.cards_p1[20u32] r48 into r49;
    ternary r9 r4.cards_p1[21u32] r49 into r50;
    ternary r8 r4.cards_p1[22u32] r50 into r51;
    ternary r7 r4.cards_p1[23u32] r51 into r52;
    ternary r6 r4.cards_p1[24u32] r52 into r53;
    ternary r5 r4.cards_p1[25u32] r53 into r54;
    is.eq r1 r4.player1 into r55;
    assert.eq r55 true;
    is.eq r2 r54 into r56;
    assert.eq r56 true;
    is.eq r4.p1_must_reveal_p2 true into r57;
    assert.eq r57 true;
    is.eq r4.remaining_cards_p1 1u8 into r58;
    ternary r58 r3 r4.cards_p1[0u32] into r59;
    is.eq r4.remaining_cards_p1 2u8 into r60;
    ternary r60 r3 r4.cards_p1[1u32] into r61;
    is.eq r4.remaining_cards_p1 3u8 into r62;
    ternary r62 r3 r4.cards_p1[2u32] into r63;
    is.eq r4.remaining_cards_p1 4u8 into r64;
    ternary r64 r3 r4.cards_p1[3u32] into r65;
    is.eq r4.remaining_cards_p1 5u8 into r66;
    ternary r66 r3 r4.cards_p1[4u32] into r67;
    is.eq r4.remaining_cards_p1 6u8 into r68;
    ternary r68 r3 r4.cards_p1[5u32] into r69;
    is.eq r4.remaining_cards_p1 7u8 into r70;
    ternary r70 r3 r4.cards_p1[6u32] into r71;
    is.eq r4.remaining_cards_p1 8u8 into r72;
    ternary r72 r3 r4.cards_p1[7u32] into r73;
    is.eq r4.remaining_cards_p1 9u8 into r74;
    ternary r74 r3 r4.cards_p1[8u32] into r75;
    is.eq r4.remaining_cards_p1 10u8 into r76;
    ternary r76 r3 r4.cards_p1[9u32] into r77;
    is.eq r4.remaining_cards_p1 11u8 into r78;
    ternary r78 r3 r4.cards_p1[10u32] into r79;
    is.eq r4.remaining_cards_p1 12u8 into r80;
    ternary r80 r3 r4.cards_p1[11u32] into r81;
    is.eq r4.remaining_cards_p1 13u8 into r82;
    ternary r82 r3 r4.cards_p1[12u32] into r83;
    is.eq r4.remaining_cards_p1 14u8 into r84;
    ternary r84 r3 r4.cards_p1[13u32] into r85;
    is.eq r4.remaining_cards_p1 15u8 into r86;
    ternary r86 r3 r4.cards_p1[14u32] into r87;
    is.eq r4.remaining_cards_p1 16u8 into r88;
    ternary r88 r3 r4.cards_p1[15u32] into r89;
    is.eq r4.remaining_cards_p1 17u8 into r90;
    ternary r90 r3 r4.cards_p1[16u32] into r91;
    is.eq r4.remaining_cards_p1 18u8 into r92;
    ternary r92 r3 r4.cards_p1[17u32] into r93;
    is.eq r4.remaining_cards_p1 19u8 into r94;
    ternary r94 r3 r4.cards_p1[18u32] into r95;
    is.eq r4.remaining_cards_p1 20u8 into r96;
    ternary r96 r3 r4.cards_p1[19u32] into r97;
    is.eq r4.remaining_cards_p1 21u8 into r98;
    ternary r98 r3 r4.cards_p1[20u32] into r99;
    is.eq r4.remaining_cards_p1 22u8 into r100;
    ternary r100 r3 r4.cards_p1[21u32] into r101;
    is.eq r4.remaining_cards_p1 23u8 into r102;
    ternary r102 r3 r4.cards_p1[22u32] into r103;
    is.eq r4.remaining_cards_p1 24u8 into r104;
    ternary r104 r3 r4.cards_p1[23u32] into r105;
    is.eq r4.remaining_cards_p1 25u8 into r106;
    ternary r106 r3 r4.cards_p1[24u32] into r107;
    is.eq r4.remaining_cards_p1 26u8 into r108;
    ternary r108 r3 r4.cards_p1[25u32] into r109;
    cast r59 r61 r63 r65 r67 r69 r71 r73 r75 r77 r79 r81 r83 r85 r87 r89 r91 r93 r95 r97 r99 r101 r103 r105 r107 r109 into r110 as [u128; 26u32];
    cast r4.player1 r4.player2 r110 r4.cards_p2 r4.chips_p1 r4.chips_p2 r4.turn r4.war r4.remaining_cards_p1 r4.remaining_cards_p2 true false r4.p1_must_reveal_p2 r4.p2_must_reveal_p2 r4.p2_must_reveal_p1 false 0u8 into r111 as Game;
    set r111 into games[r0];

function p1_reveal_p1:
    input r0 as u32.private;
    input r1 as u128.private;
    input r2 as Keys.record;
    call zk_sra_encryption.aleo/decrypt_card r2.d r2.n r1 into r3;
    async p1_reveal_p1 r0 self.caller r1 r3 into r4;
    cast r2.owner r2.e r2.d r2.n into r5 as Keys.record;
    output r5 as Keys.record;
    output r4 as war_000000000000000000000000000.aleo/p1_reveal_p1.future;

finalize p1_reveal_p1:
    input r0 as u32.public;
    input r1 as address.public;
    input r2 as u128.public;
    input r3 as u128.public;
    get games[r0] into r4;
    is.eq r4.remaining_cards_p1 26u8 into r5;
    is.eq r4.remaining_cards_p1 25u8 into r6;
    is.eq r4.remaining_cards_p1 24u8 into r7;
    is.eq r4.remaining_cards_p1 23u8 into r8;
    is.eq r4.remaining_cards_p1 22u8 into r9;
    is.eq r4.remaining_cards_p1 21u8 into r10;
    is.eq r4.remaining_cards_p1 20u8 into r11;
    is.eq r4.remaining_cards_p1 19u8 into r12;
    is.eq r4.remaining_cards_p1 18u8 into r13;
    is.eq r4.remaining_cards_p1 17u8 into r14;
    is.eq r4.remaining_cards_p1 16u8 into r15;
    is.eq r4.remaining_cards_p1 15u8 into r16;
    is.eq r4.remaining_cards_p1 14u8 into r17;
    is.eq r4.remaining_cards_p1 13u8 into r18;
    is.eq r4.remaining_cards_p1 12u8 into r19;
    is.eq r4.remaining_cards_p1 11u8 into r20;
    is.eq r4.remaining_cards_p1 10u8 into r21;
    is.eq r4.remaining_cards_p1 9u8 into r22;
    is.eq r4.remaining_cards_p1 8u8 into r23;
    is.eq r4.remaining_cards_p1 7u8 into r24;
    is.eq r4.remaining_cards_p1 6u8 into r25;
    is.eq r4.remaining_cards_p1 5u8 into r26;
    is.eq r4.remaining_cards_p1 4u8 into r27;
    is.eq r4.remaining_cards_p1 3u8 into r28;
    is.eq r4.remaining_cards_p1 2u8 into r29;
    ternary r29 r4.cards_p1[1u32] r4.cards_p1[0u32] into r30;
    ternary r28 r4.cards_p1[2u32] r30 into r31;
    ternary r27 r4.cards_p1[3u32] r31 into r32;
    ternary r26 r4.cards_p1[4u32] r32 into r33;
    ternary r25 r4.cards_p1[5u32] r33 into r34;
    ternary r24 r4.cards_p1[6u32] r34 into r35;
    ternary r23 r4.cards_p1[7u32] r35 into r36;
    ternary r22 r4.cards_p1[8u32] r36 into r37;
    ternary r21 r4.cards_p1[9u32] r37 into r38;
    ternary r20 r4.cards_p1[10u32] r38 into r39;
    ternary r19 r4.cards_p1[11u32] r39 into r40;
    ternary r18 r4.cards_p1[12u32] r40 into r41;
    ternary r17 r4.cards_p1[13u32] r41 into r42;
    ternary r16 r4.cards_p1[14u32] r42 into r43;
    ternary r15 r4.cards_p1[15u32] r43 into r44;
    ternary r14 r4.cards_p1[16u32] r44 into r45;
    ternary r13 r4.cards_p1[17u32] r45 into r46;
    ternary r12 r4.cards_p1[18u32] r46 into r47;
    ternary r11 r4.cards_p1[19u32] r47 into r48;
    ternary r10 r4.cards_p1[20u32] r48 into r49;
    ternary r9 r4.cards_p1[21u32] r49 into r50;
    ternary r8 r4.cards_p1[22u32] r50 into r51;
    ternary r7 r4.cards_p1[23u32] r51 into r52;
    ternary r6 r4.cards_p1[24u32] r52 into r53;
    ternary r5 r4.cards_p1[25u32] r53 into r54;
    is.eq r1 r4.player1 into r55;
    assert.eq r55 true;
    is.eq r2 r54 into r56;
    assert.eq r56 true;
    is.eq r4.p1_must_reveal_p1 true into r57;
    assert.eq r57 true;
    assert.eq r4.must_compare true;
    is.eq r4.remaining_cards_p1 1u8 into r58;
    ternary r58 r3 r4.cards_p1[0u32] into r59;
    is.eq r4.remaining_cards_p1 2u8 into r60;
    ternary r60 r3 r4.cards_p1[1u32] into r61;
    is.eq r4.remaining_cards_p1 3u8 into r62;
    ternary r62 r3 r4.cards_p1[2u32] into r63;
    is.eq r4.remaining_cards_p1 4u8 into r64;
    ternary r64 r3 r4.cards_p1[3u32] into r65;
    is.eq r4.remaining_cards_p1 5u8 into r66;
    ternary r66 r3 r4.cards_p1[4u32] into r67;
    is.eq r4.remaining_cards_p1 6u8 into r68;
    ternary r68 r3 r4.cards_p1[5u32] into r69;
    is.eq r4.remaining_cards_p1 7u8 into r70;
    ternary r70 r3 r4.cards_p1[6u32] into r71;
    is.eq r4.remaining_cards_p1 8u8 into r72;
    ternary r72 r3 r4.cards_p1[7u32] into r73;
    is.eq r4.remaining_cards_p1 9u8 into r74;
    ternary r74 r3 r4.cards_p1[8u32] into r75;
    is.eq r4.remaining_cards_p1 10u8 into r76;
    ternary r76 r3 r4.cards_p1[9u32] into r77;
    is.eq r4.remaining_cards_p1 11u8 into r78;
    ternary r78 r3 r4.cards_p1[10u32] into r79;
    is.eq r4.remaining_cards_p1 12u8 into r80;
    ternary r80 r3 r4.cards_p1[11u32] into r81;
    is.eq r4.remaining_cards_p1 13u8 into r82;
    ternary r82 r3 r4.cards_p1[12u32] into r83;
    is.eq r4.remaining_cards_p1 14u8 into r84;
    ternary r84 r3 r4.cards_p1[13u32] into r85;
    is.eq r4.remaining_cards_p1 15u8 into r86;
    ternary r86 r3 r4.cards_p1[14u32] into r87;
    is.eq r4.remaining_cards_p1 16u8 into r88;
    ternary r88 r3 r4.cards_p1[15u32] into r89;
    is.eq r4.remaining_cards_p1 17u8 into r90;
    ternary r90 r3 r4.cards_p1[16u32] into r91;
    is.eq r4.remaining_cards_p1 18u8 into r92;
    ternary r92 r3 r4.cards_p1[17u32] into r93;
    is.eq r4.remaining_cards_p1 19u8 into r94;
    ternary r94 r3 r4.cards_p1[18u32] into r95;
    is.eq r4.remaining_cards_p1 20u8 into r96;
    ternary r96 r3 r4.cards_p1[19u32] into r97;
    is.eq r4.remaining_cards_p1 21u8 into r98;
    ternary r98 r3 r4.cards_p1[20u32] into r99;
    is.eq r4.remaining_cards_p1 22u8 into r100;
    ternary r100 r3 r4.cards_p1[21u32] into r101;
    is.eq r4.remaining_cards_p1 23u8 into r102;
    ternary r102 r3 r4.cards_p1[22u32] into r103;
    is.eq r4.remaining_cards_p1 24u8 into r104;
    ternary r104 r3 r4.cards_p1[23u32] into r105;
    is.eq r4.remaining_cards_p1 25u8 into r106;
    ternary r106 r3 r4.cards_p1[24u32] into r107;
    is.eq r4.remaining_cards_p1 26u8 into r108;
    ternary r108 r3 r4.cards_p1[25u32] into r109;
    cast r59 r61 r63 r65 r67 r69 r71 r73 r75 r77 r79 r81 r83 r85 r87 r89 r91 r93 r95 r97 r99 r101 r103 r105 r107 r109 into r110 as [u128; 26u32];
    cast r4.player1 r4.player2 r110 r4.cards_p2 r4.chips_p1 r4.chips_p2 r4.turn r4.war r4.remaining_cards_p1 r4.remaining_cards_p2 true false false r4.p2_must_reveal_p2 false true 0u8 into r111 as Game;
    set r111 into games[r0];

function compare_cards:
    input r0 as u32.private;
    async compare_cards r0 into r1;
    output r1 as war_000000000000000000000000000.aleo/compare_cards.future;

finalize compare_cards:
    input r0 as u32.public;
    get games[r0] into r1;
    not r1.p1_must_reveal_p1 into r2;
    assert.eq r2 true;
    not r1.p1_must_reveal_p2 into r3;
    assert.eq r3 true;
    not r1.p2_must_reveal_p2 into r4;
    assert.eq r4 true;
    not r1.p2_must_reveal_p1 into r5;
    assert.eq r5 true;
    assert.eq r1.must_compare true;
    is.eq r1.remaining_cards_p1 26u8 into r6;
    is.eq r1.remaining_cards_p1 25u8 into r7;
    is.eq r1.remaining_cards_p1 24u8 into r8;
    is.eq r1.remaining_cards_p1 23u8 into r9;
    is.eq r1.remaining_cards_p1 22u8 into r10;
    is.eq r1.remaining_cards_p1 21u8 into r11;
    is.eq r1.remaining_cards_p1 20u8 into r12;
    is.eq r1.remaining_cards_p1 19u8 into r13;
    is.eq r1.remaining_cards_p1 18u8 into r14;
    is.eq r1.remaining_cards_p1 17u8 into r15;
    is.eq r1.remaining_cards_p1 16u8 into r16;
    is.eq r1.remaining_cards_p1 15u8 into r17;
    is.eq r1.remaining_cards_p1 14u8 into r18;
    is.eq r1.remaining_cards_p1 13u8 into r19;
    is.eq r1.remaining_cards_p1 12u8 into r20;
    is.eq r1.remaining_cards_p1 11u8 into r21;
    is.eq r1.remaining_cards_p1 10u8 into r22;
    is.eq r1.remaining_cards_p1 9u8 into r23;
    is.eq r1.remaining_cards_p1 8u8 into r24;
    is.eq r1.remaining_cards_p1 7u8 into r25;
    is.eq r1.remaining_cards_p1 6u8 into r26;
    is.eq r1.remaining_cards_p1 5u8 into r27;
    is.eq r1.remaining_cards_p1 4u8 into r28;
    is.eq r1.remaining_cards_p1 3u8 into r29;
    is.eq r1.remaining_cards_p1 2u8 into r30;
    ternary r30 r1.cards_p1[1u32] r1.cards_p1[0u32] into r31;
    ternary r29 r1.cards_p1[2u32] r31 into r32;
    ternary r28 r1.cards_p1[3u32] r32 into r33;
    ternary r27 r1.cards_p1[4u32] r33 into r34;
    ternary r26 r1.cards_p1[5u32] r34 into r35;
    ternary r25 r1.cards_p1[6u32] r35 into r36;
    ternary r24 r1.cards_p1[7u32] r36 into r37;
    ternary r23 r1.cards_p1[8u32] r37 into r38;
    ternary r22 r1.cards_p1[9u32] r38 into r39;
    ternary r21 r1.cards_p1[10u32] r39 into r40;
    ternary r20 r1.cards_p1[11u32] r40 into r41;
    ternary r19 r1.cards_p1[12u32] r41 into r42;
    ternary r18 r1.cards_p1[13u32] r42 into r43;
    ternary r17 r1.cards_p1[14u32] r43 into r44;
    ternary r16 r1.cards_p1[15u32] r44 into r45;
    ternary r15 r1.cards_p1[16u32] r45 into r46;
    ternary r14 r1.cards_p1[17u32] r46 into r47;
    ternary r13 r1.cards_p1[18u32] r47 into r48;
    ternary r12 r1.cards_p1[19u32] r48 into r49;
    ternary r11 r1.cards_p1[20u32] r49 into r50;
    ternary r10 r1.cards_p1[21u32] r50 into r51;
    ternary r9 r1.cards_p1[22u32] r51 into r52;
    ternary r8 r1.cards_p1[23u32] r52 into r53;
    ternary r7 r1.cards_p1[24u32] r53 into r54;
    ternary r6 r1.cards_p1[25u32] r54 into r55;
    is.eq r1.remaining_cards_p2 26u8 into r56;
    is.eq r1.remaining_cards_p2 25u8 into r57;
    is.eq r1.remaining_cards_p2 24u8 into r58;
    is.eq r1.remaining_cards_p2 23u8 into r59;
    is.eq r1.remaining_cards_p2 22u8 into r60;
    is.eq r1.remaining_cards_p2 21u8 into r61;
    is.eq r1.remaining_cards_p2 20u8 into r62;
    is.eq r1.remaining_cards_p2 19u8 into r63;
    is.eq r1.remaining_cards_p2 18u8 into r64;
    is.eq r1.remaining_cards_p2 17u8 into r65;
    is.eq r1.remaining_cards_p2 16u8 into r66;
    is.eq r1.remaining_cards_p2 15u8 into r67;
    is.eq r1.remaining_cards_p2 14u8 into r68;
    is.eq r1.remaining_cards_p2 13u8 into r69;
    is.eq r1.remaining_cards_p2 12u8 into r70;
    is.eq r1.remaining_cards_p2 11u8 into r71;
    is.eq r1.remaining_cards_p2 10u8 into r72;
    is.eq r1.remaining_cards_p2 9u8 into r73;
    is.eq r1.remaining_cards_p2 8u8 into r74;
    is.eq r1.remaining_cards_p2 7u8 into r75;
    is.eq r1.remaining_cards_p2 6u8 into r76;
    is.eq r1.remaining_cards_p2 5u8 into r77;
    is.eq r1.remaining_cards_p2 4u8 into r78;
    is.eq r1.remaining_cards_p2 3u8 into r79;
    is.eq r1.remaining_cards_p2 2u8 into r80;
    ternary r80 r1.cards_p2[1u32] r1.cards_p2[0u32] into r81;
    ternary r79 r1.cards_p2[2u32] r81 into r82;
    ternary r78 r1.cards_p2[3u32] r82 into r83;
    ternary r77 r1.cards_p2[4u32] r83 into r84;
    ternary r76 r1.cards_p2[5u32] r84 into r85;
    ternary r75 r1.cards_p2[6u32] r85 into r86;
    ternary r74 r1.cards_p2[7u32] r86 into r87;
    ternary r73 r1.cards_p2[8u32] r87 into r88;
    ternary r72 r1.cards_p2[9u32] r88 into r89;
    ternary r71 r1.cards_p2[10u32] r89 into r90;
    ternary r70 r1.cards_p2[11u32] r90 into r91;
    ternary r69 r1.cards_p2[12u32] r91 into r92;
    ternary r68 r1.cards_p2[13u32] r92 into r93;
    ternary r67 r1.cards_p2[14u32] r93 into r94;
    ternary r66 r1.cards_p2[15u32] r94 into r95;
    ternary r65 r1.cards_p2[16u32] r95 into r96;
    ternary r64 r1.cards_p2[17u32] r96 into r97;
    ternary r63 r1.cards_p2[18u32] r97 into r98;
    ternary r62 r1.cards_p2[19u32] r98 into r99;
    ternary r61 r1.cards_p2[20u32] r99 into r100;
    ternary r60 r1.cards_p2[21u32] r100 into r101;
    ternary r59 r1.cards_p2[22u32] r101 into r102;
    ternary r58 r1.cards_p2[23u32] r102 into r103;
    ternary r57 r1.cards_p2[24u32] r103 into r104;
    ternary r56 r1.cards_p2[25u32] r104 into r105;
    gt r55 r105 into r106;
    gt r105 r55 into r107;
    cast r1.war into r108 as i8;
    mul r108 2i8 into r109;
    add r1.chips_p1 r109 into r110;
    cast r1.war into r111 as i8;
    mul r111 2i8 into r112;
    sub r1.chips_p1 r112 into r113;
    ternary r107 r113 r1.chips_p1 into r114;
    ternary r106 r110 r114 into r115;
    cast r1.war into r116 as i8;
    mul r116 2i8 into r117;
    add r1.chips_p2 r117 into r118;
    cast r1.war into r119 as i8;
    mul r119 2i8 into r120;
    sub r1.chips_p2 r120 into r121;
    ternary r106 r121 r1.chips_p2 into r122;
    ternary r107 r118 r122 into r123;
    sub r1.remaining_cards_p1 1u8 into r124;
    sub r1.remaining_cards_p2 1u8 into r125;
    lte r123 0i8 into r126;
    is.eq r125 0u8 into r127;
    or r126 r127 into r128;
    lte r115 0i8 into r129;
    is.eq r124 0u8 into r130;
    or r129 r130 into r131;
    ternary r131 2u8 0u8 into r132;
    ternary r128 1u8 r132 into r133;
    add r1.turn 1u8 into r134;
    or r106 r107 into r135;
    mul r1.war 2u8 into r136;
    ternary r135 1u8 r136 into r137;
    cast r1.player1 r1.player2 r1.cards_p1 r1.cards_p2 r115 r123 r134 r137 r124 r125 false false true false true false r133 into r138 as Game;
    set r138 into games[r0];

function claim_prize:
    input r0 as u32.private;
    call credits.aleo/transfer_public_as_signer self.caller 20000000u64 into r1;
    async claim_prize r0 self.caller r1 into r2;
    output r2 as war_000000000000000000000000000.aleo/claim_prize.future;

finalize claim_prize:
    input r0 as u32.public;
    input r1 as address.public;
    input r2 as credits.aleo/transfer_public_as_signer.future;
    get games[r0] into r3;
    is.eq r3.winner 1u8 into r4;
    is.eq r1 r3.player1 into r5;
    and r4 r5 into r6;
    is.eq r3.winner 2u8 into r7;
    is.eq r1 r3.player2 into r8;
    and r7 r8 into r9;
    or r6 r9 into r10;
    assert.eq r10 true;
    is.neq r3.winner 3u8 into r11;
    assert.eq r11 true;
    await r2;
    cast r3.player1 r3.player2 r3.cards_p1 r3.cards_p2 r3.chips_p1 r3.chips_p2 r3.turn r3.war r3.remaining_cards_p1 r3.remaining_cards_p2 r3.first_move_done r3.p1_must_reveal_p1 r3.p1_must_reveal_p2 r3.p2_must_reveal_p2 r3.p2_must_reveal_p1 r3.must_compare 3u8 into r12 as Game;
    set r12 into games[r0];
